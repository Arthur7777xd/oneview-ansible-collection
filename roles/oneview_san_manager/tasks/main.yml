---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- debug: var=session

- name: Get currentVersion from URL
  oneview_version_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
  when: config_file.api_version == ""
  register: version

- name: Print currentVersion if api version is not specified in config file
  set_fact: 
    currentVersion: "{{ version.ansible_facts.version.currentVersion | int }}"
  when: config_file.api_version == ""

- name: Print currentVersion if api version is specified in config file
  set_fact: 
    currentVersion: config_file.api_version | string
  when: config_file.api_version != ""

- name: Add a San Manager Storage System
  oneview_san_manager:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      providerDisplayName: "Brocade FOS Switch"
      connectionInfo:
        - name: "Host"
          displayName: "Host"
          required: true
          value: "172.18.19.1"
          valueType: "String"
          valueFormat: "IPAddressOrHostname"
        - name: "Username"
          displayName: "Username"
          required: true
          value: "dcs"
          valueType: "String"
          valueFormat: "None"
        - name: "Password"
          displayName: "Password"
          required: true
          value : "dcs"
          valueType: "String"
          valueFormat: "SecuritySensitive"
        - name: "UseHttps"
          displayName: "UseHttps"
          required: true
          value: true
          valueType: Boolean
          valueFormat: "None"     
  delegate_to: localhost
  register: san_manager1
- debug:
    msg: "San Manager added is  {{ san_manager1.ansible_facts.san_managers.uri }}"
  # var=san_manager
- debug: var=san_manager1

- name: Refresh the San Manager
  oneview_san_manager:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: refresh_state_set
    data:
      name: "172.18.19.1"
      refreshState: "RefreshPending"
      uri: "{{ san_manager1.ansible_facts.san_managers.uri }}"
  delegate_to: localhost

# - name: Update the San Manager
#   oneview_san_manager:
#     config: "{{ config }}"
#     sessionID: "{{ session.ansible_facts.session }}"
#     state: present
#     data:
#       name: "172.18.19.1"
#       uri: "{{ san_manager1.ansible_facts.san_managers.uri }}"
#       connectionInfo:
#         - name: "Host"
#           displayName: "Host"
#           required: true
#           value: "172.18.19.1"
#           valueType: "String"
#           valueFormat: "IPAddressOrHostname"
#         - name: "Username"
#           displayName: "Username"
#           required: true
#           value: "dcs"
#           valueType: "String"
#           valueFormat: "None"


- name: Remove the San Manager from OneView
  oneview_san_manager:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: absent
    data:
      name: "172.18.19.1"
  delegate_to: localhost
  register: deleted

- name: Do nothing when San Manager is absent
  oneview_san_manager:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: absent
    data:
      name: "172.18.19.1"
  delegate_to: localhost
  register: deleted


