---
- name: Get currentVersion from URL
  oneview_version_facts:
    config: "{{ config }}" 
  delegate_to: localhost
  when: contents.api_version == ""
  register: version

- name: Print currentVersion if an apiVersion is not specified in config file
  set_fact: 
    currentVersion: "{{ version.ansible_facts.version.currentVersion|int }}"
  when: contents.api_version == ""

- name: Print currentVersion if an apiVersion is specified in config file
  set_fact: 
    currentVersion: contents.api_version | string
  when: contents.api_version != ""

# Below task is supported only with C7000 Hardware
- name: Update the Ethernet interconnect settings for the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: ethernet_settings_updated
    data:
      name: "{{ logical_interconnect_name }}"
      ethernetSettings:
        macRefreshInterval: 11
  delegate_to: localhost
  when: variant == 'C7000'

# Below task is supported only with Synergy Hardware
- name: Update the Ethernet interconnect settings for the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: ethernet_settings_updated
    data:
      name: "{{ logical_interconnect_name }}"
      ethernetSettings:
        stormControlThreshold: 15
  delegate_to: localhost
  when: variant == 'Synergy'

- name: Update the Internal Networks on the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: internal_networks_updated
    data:
      name: "{{ logical_interconnect_name }}"
      internalNetworks:
        - name: "{{ network_name }}"  # could also be a URI. e.g.: - uri: '/rest/ethernet-network/<id>'
  when: network_name is defined
  delegate_to: localhost

# Below task is supported only with OneView 3.10
- name: Update the Interconnect Settings
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: settings_updated
    data:
      name: "{{ logical_interconnect_name }}"
      ethernetSettings:
        macRefreshInterval: 12
  delegate_to: localhost
  when: currentVersion <= '500'

- name: Generate the forwarding information base dump file for the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: forwarding_information_base_generated
    data:
      name: "{{ logical_interconnect_name }}"
  delegate_to: localhost
  register: result

- debug: msg="{{ result.msg }}"

- name: Update the QoS aggregated configuration for the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: qos_aggregated_configuration_updated
    data:
      name: "{{ logical_interconnect_name }}"
      qosConfiguration:
        activeQosConfig:
          category: 'qos-aggregated-configuration'
          configType: 'Passthrough'
          downlinkClassificationType: ~
          uplinkClassificationType: ~
          qosTrafficClassifiers: []
          type: 'QosConfiguration'
  delegate_to: localhost
  register: result

- name: Update the SNMP configuration for the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: snmp_configuration_updated
    data:
      name: "{{ logical_interconnect_name }}"
      snmpConfiguration:
        enabled: True
        readCommunity: "public"    
  delegate_to: localhost

- name: Update the port monitor configuration of the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: port_monitor_updated
    data:
      name: "{{ logical_interconnect_name }}"
      portMonitor:
        enablePortMonitor: False
  delegate_to: localhost

- name: Update the configuration on the logical interconnect
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: configuration_updated
    data:
      name: "{{ logical_interconnect_name }}"
  delegate_to: localhost

- name: Updates the telemetry configuration of a logical interconnect.
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: telemetry_configuration_updated
    data:
      name: "{{ logical_interconnect_name }}"
      telemetryConfiguration:
        sampleCount: 12
        enableTelemetry: True
        sampleInterval: 300
  delegate_to: localhost

- debug: var=telemetry_configuration

- name: Gather paginated, filtered and sorted facts about Firmware Drivers
  oneview_firmware_driver_facts:
    config: "{{ config }}"
    params:
      start: 0
      count: 3
      sort: 'name:descending'
      query: bundleType eq 'SPP'

- debug: var=firmware_drivers

- name: Install a firmware to the logical interconnect, running the stage operation to upload the firmware
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: firmware_installed
    data:
      name: "{{ logical_interconnect_name }}"
      firmware:
        command: Stage
        spp: "{{ firmware_drivers[0]['uri'] }}"  # could also be a sppUri. e.g.: - sppUri: '/rest/firmware-drivers/<filename>'
  when: firmware_driver is defined
  delegate_to: localhost

- name: Return the Logical Interconnect to a consistent state
  oneview_logical_interconnect:
    config: "{{ config }}"
    state: compliant
    data:
      name: "{{ logical_interconnect_name }}"
  delegate_to: localhost
